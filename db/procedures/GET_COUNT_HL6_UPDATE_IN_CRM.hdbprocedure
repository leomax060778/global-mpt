PROCEDURE "MKTG_PLANNING_TOOL"."mktgplanningtool.db.procedures::GET_COUNT_HL6_UPDATE_IN_CRM" (
    OUT out_result TABLE (
        HL_WITH_DATES INTEGER,
        HL_WITHOUT_DATES INTEGER
    )
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "MKTG_PLANNING_TOOL"
	READS SQL DATA AS
BEGIN

	--Obtain All HL6 with 'Update In CRM' status
    var_hl6 =   SELECT HL6_ID
                FROM HL6
                WHERE HL6.deleted = 0
                    AND HL6.enabled = 1
                    AND HL6.HL6_STATUS_DETAIL_ID
                        IN (
							SELECT HL6_STATUS_DETAIL_ID
                            FROM HL6_STATUS_DETAIL
                            WHERE DETAIL IN ('Update In CRM')
							);

	out_hl6_with_category_option_changes = (SELECT  hl6CO.hl6_id,
                                        option.allocation_option_id AS option_id,
                                        option.name AS option_name,
                                        ACOL.allocation_category_option_level_id AS category_option_level_id,
                                        hl6CO.amount,
                                        category.name AS category_name,
                                        ACOL.allocation_category_id,
                                        category.processing_report_export_key,
                                        option.crm_key
                                FROM hl6_category_option hl6CO
                                    INNER JOIN allocation_category_option_level ACOL
                                        ON ACOL.allocation_category_option_level_id = hl6CO.allocation_category_option_level_id
                                    INNER JOIN allocation_option option
                                        ON ACOL.allocation_option_id = option.allocation_option_id
                                    INNER JOIN allocation_category category
                                        ON category.allocation_category_id = ACOL.allocation_category_id
                                    INNER JOIN :var_hl6 T
                                        ON T.hl6_id = hl6CO.hl6_id
                                where hl6CO.deleted = 0
                                    AND hl6CO.enabled = 1
                                    AND hl6CO.updated = 1
                                )

                                UNION ALL

                                (SELECT hl6CO.hl6_id,
                                        option.ALLOCATION_COUNTRY_CATEGORY_OPTION_ID AS option_id,
                                        option.name AS option_name,
                                        ACOL.ALLOCATION_COUNTRY_CATEGORY_OPTION_LEVEL_ID AS category_option_level_id,
                                        hl6CO.amount,
                                        category.name AS category_name,
                                        ACOL.allocation_category_id,
                                        category.processing_report_export_key,
                                        option.crm_key
                                FROM HL6_COUNTRY_CATEGORY_OPTION hl6CO
                                    INNER JOIN ALLOCATION_COUNTRY_CATEGORY_OPTION_LEVEL ACOL
                                        ON ACOL.ALLOCATION_COUNTRY_CATEGORY_OPTION_LEVEL_ID = hl6CO.ALLOCATION_COUNTRY_CATEGORY_OPTION_LEVEL_ID
                                    INNER JOIN ALLOCATION_COUNTRY_CATEGORY_OPTION option
                                        ON ACOL.ALLOCATION_COUNTRY_CATEGORY_OPTION_ID = option.ALLOCATION_COUNTRY_CATEGORY_OPTION_ID
                                    INNER JOIN allocation_category category
                                        ON category.allocation_category_id = ACOL.allocation_category_id
                                    INNER JOIN :var_hl6 T
                                        ON T.hl6_id = hl6CO.hl6_id
                                where hl6CO.deleted = 0
                                    AND hl6CO.enabled = 1
                                    AND hl6CO.updated = 1);

	--Obtain all HL6 With changes in Dates, filtered by the Status above
	out_hl6_with_dates_changed = SELECT hcb.hl6_id
								 FROM HL6_CRM_BINDING hcb
									INNER JOIN :var_hl6 HL6
										ON HL6.HL6_ID = hcb.HL6_ID
								 WHERE hcb.column_changed = 1
									AND (
										hcb.column_name = 'ACTUAL_START_DATE'
										OR
										hcb.column_name = 'ACTUAL_END_DATE'
										OR
										hcb.column_name = 'PLANNED_START_DATE'
										OR
										hcb.column_name = 'PLANNED_END_DATE'
									)
									AND hcb.deleted = 0
									AND hcb.enabled = 1;

	--Obtain all HL6 with status Update In CRM and changes
	out_hl6_with_changes = SELECT HL6_CRM_BINDING.hl6_id, column_name, display_name
                         FROM HL6_CRM_BINDING
                            INNER JOIN :var_hl6 HL6
                                ON HL6.HL6_ID = HL6_CRM_BINDING.HL6_ID
						 WHERE column_changed = 1
						    AND deleted = 0
						    AND enabled = 1;

    va_hl6_changed_fields = SELECT DISTINCT hl6_id FROM :out_hl6_with_dates_changed;

    out_result_with_dates = SELECT HL6.HL6_ID
							FROM HL6
								INNER JOIN :var_hl6 T
									ON T.HL6_ID = HL6.hl6_id
							WHERE HL6.HL6_ID IN (
								SELECT T1.HL6_ID
								FROM :va_hl6_changed_fields T1
								);

    out_result_full =  SELECT HL6.HL6_ID
								FROM HL6
									INNER JOIN :var_hl6 T
										ON T.HL6_ID = HL6.hl6_id
								WHERE HL6.HL6_ID IN (
									SELECT T1.HL6_ID
									FROM :out_hl6_with_changes T1

									UNION

									SELECT T2.hl6_id
									FROM :out_hl6_with_category_option_changes T2
								);

	out_result_no_dates = SELECT full_l5.HL6_ID
	                        FROM :out_result_full full_l5
	                        WHERE full_l5.HL6_ID NOT IN (SELECT nod.HL6_ID FROM :out_result_with_dates nod);

    out_result = SELECT
    				(SELECT COUNT (out_l6.HL6_ID) FROM :out_result_full out_l6) AS HL_WITH_DATES,
    				(SELECT COUNT (out_l6_no.HL6_ID) FROM :out_result_no_dates out_l6_no) AS HL_WITHOUT_DATES
    			 FROM DUMMY;
END;
