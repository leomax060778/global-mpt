PROCEDURE "MKTG_PLANNING_TOOL"."mktgplanningtool.db.procedures::GET_INTERLOCK_BY_ID" (
IN in_interlock_request_id bigint
, OUT out_result TABLE(
	interlock_request_id BIGINT
	,entity_id BIGINT 
	,entity_id_from BIGINT
	,entity_name NVARCHAR(255)
	,organization_type_id BIGINT
	,organization_type_id_from BIGINT
	,organization_type NVARCHAR(255)
	,requested_resource NVARCHAR(255)
	,requested_budget DECIMAL(19, 6)
	,status_id BIGINT
	,status NVARCHAR(255)
	,organization NVARCHAR(255)
	,organization_id BIGINT
	,organization_id_from BIGINT
	,created_user_id BIGINT
	,requester_email NVARCHAR(255)
	,comments NVARCHAR(255)
    ),
  OUT out_contact_data TABLE(
		interlock_contact_data_id bigint,
		interlock_request_id bigint,
		email nvarchar(255),
		hash nvarchar(255),
		created_user_id bigint
	)
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "MKTG_PLANNING_TOOL"
	READS SQL DATA AS
BEGIN
	out_result = 
					SELECT 
					 IR.INTERLOCK_REQUEST_ID
					,IE.INTERLOCK_ENTITY_ID AS ENTITY_ID
					,IR.ENTITY_ID_FROM AS ENTITY_ID_FROM
					,IE.NAME AS ENTITY_NAME
					,OT.ORGANIZATION_TYPE_ID
					,IR.ORGANIZATION_TYPE_ID_FROM
					,OT.NAME AS ORGANIZATION_TYPE
					,IR.REQUESTED_RESOURCE
					,IR.REQUESTED_BUDGET
					,IR.INTERLOCK_STATUS_ID AS STATUS_ID
					,IST.DISPLAY_NAME AS STATUS
					, CASE WHEN ILR.INTERLOCK_REQUEST_ID IS NOT NULL THEN R.REGION_NAME 
					  WHEN ILSR.INTERLOCK_REQUEST_ID IS NOT NULL THEN SR.SUBREGION_NAME 
					  --WHEN ILCT.INTERLOCK_REQUEST_ID IS NOT NULL THEN CT.ACRONYM
					  WHEN ILCT.INTERLOCK_REQUEST_ID IS NOT NULL THEN IO.NAME
					  ELSE '' END AS ORGANIZATION,
					  COALESCE(ILR.REGION_ID,
                               ILSR.SUBREGION_ID,
                               ILCT.INTERLOCK_ORGANIZATION_ID) as ORGANIZATION_ID,
                      COALESCE(ILR.REGION_ID_FROM,
                               ILSR.SUBREGION_ID_FROM,
                               ILCT.INTERLOCK_ORGANIZATION_ID_FROM) as ORGANIZATION_ID_FROM
					,IR.CREATED_USER_ID
					,IR.REQUESTER_EMAIL
					, COMMENTS
				
					
					FROM INTERLOCK_REQUEST IR 
					INNER JOIN INTERLOCK_CONTACT_DATA ILCD ON ILCD.INTERLOCK_REQUEST_ID = IR.INTERLOCK_REQUEST_ID 
					INNER JOIN ORGANIZATION_TYPE OT ON IR.ORGANIZATION_TYPE_ID = OT.ORGANIZATION_TYPE_ID 
					INNER JOIN INTERLOCK_ENTITY IE ON IR.ENTITY_ID = IE.INTERLOCK_ENTITY_ID 
					INNER JOIN INTERLOCK_STATUS IST ON IST.INTERLOCK_STATUS_ID = IR.INTERLOCK_STATUS_ID 
					LEFT JOIN INTERLOCK_REQUEST_REGION ILR ON ILR.INTERLOCK_REQUEST_ID = IR.INTERLOCK_REQUEST_ID 
					LEFT JOIN REGION R ON R.REGION_ID = ILR.REGION_ID 
					LEFT JOIN INTERLOCK_REQUEST_SUBREGION ILSR ON ILSR.INTERLOCK_REQUEST_ID = IR.INTERLOCK_REQUEST_ID
					LEFT JOIN SUBREGION SR ON SR.SUBREGION_ID = ILSR.SUBREGION_ID
					--LEFT JOIN INTERLOCK_REQUEST_ROUTE ILCT ON ILCT.INTERLOCK_REQUEST_ID = IR.INTERLOCK_REQUEST_ID
					LEFT JOIN INTERLOCK_REQUEST_INTERLOCK_ORGANIZATION ILCT ON ILCT.INTERLOCK_REQUEST_ID = IR.INTERLOCK_REQUEST_ID
					--LEFT JOIN HL2 CT ON CT.HL2_ID = ILCT.ROUTE_ID AND CT.TEAM_TYPE_ID = 2
					LEFT JOIN INTERLOCK_ORGANIZATION IO ON IO.INTERLOCK_ORGANIZATION_ID = ILCT.INTERLOCK_ORGANIZATION_ID
					WHERE IR.DELETED = 0 
						AND IR.ENABLED = 1
						AND IR.INTERLOCK_REQUEST_ID  = in_interlock_request_id;
						
	out_contact_data = SELECT	interlock_contact_data_id,
								interlock_request_id,
								email,
								hash,
								created_user_id
						FROM INTERLOCK_CONTACT_DATA ICD
							WHERE ICD.INTERLOCK_REQUEST_ID = in_interlock_request_id
								AND ENABLED = 1
								AND DELETED = 0;
END;
