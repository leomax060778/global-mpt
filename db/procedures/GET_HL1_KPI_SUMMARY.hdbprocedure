PROCEDURE "MKTG_PLANNING_TOOL"."mktgplanningtool.db.procedures::GET_HL1_KPI_SUMMARY" (
	IN in_budget_year_id BIGINT,
    IN in_region_id BIGINT,
    IN in_user_id BIGINT,
    IN in_is_super_Admin tinyint,
	IN in_limit INTEGER,
	IN in_offset INTEGER,
	IN in_search_string NVARCHAR(255),
	OUT out_result TABLE (
		KPI_TYPE_NAME NVARCHAR(255)
        , KPI_OPTION_NAME NVARCHAR(255)
        , TOTAL_VALUE DECIMAL(19,2)
        , TOTAL_VOLUME DECIMAL(19,2)
        , TOTAL_VALUE_ALLOCATED DECIMAL(19,2)
        , TOTAL_VOLUME_ALLOCATED DECIMAL(19,2)
        , L1_ACRONYM NVARCHAR(255)
        , CRM_ID NVARCHAR(25)
        , HL1_DESCRIPTION NVARCHAR(255)
        , BUDGET_YEAR NVARCHAR(255)
        , REGION_NAME NVARCHAR(255)
        , HL1_ID INTEGER
        , IS_LOCKED TINYINT
		),
	OUT out_total_rows INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "MKTG_PLANNING_TOOL"
	READS SQL DATA AS
BEGIN
    DECLARE va_all_regions TINYINT;
    -- this filter is necesary to filter GLOBALS, where region_id = 0
    va_all_regions = CASE WHEN in_region_id = -1 THEN 1 ELSE 0 END;

    va_limits = SELECT DISTINCT summary.HL1_ID,
                                summary.L1_ACRONYM
                    FROM "_SYS_BIC"."mktgplanningtool.db.data.views/CV_HL1_KPI_SUMMARY" summary
                    WHERE (summary.BUDGET_YEAR_ID = in_budget_year_id)
                        AND ( (:va_all_regions = 0 AND (SUMMARY.REGION_ID = in_region_id OR in_region_id = 0))
                                OR
                              (:va_all_regions = 1 AND summary.REGION_ID = 0)
                        )
                        AND (in_is_super_Admin = 1
                            OR summary.HL1_ID IN (SELECT HL1_ID FROM HL1_USER WHERE USER_ID = in_user_id))
                        AND (in_search_string = ''
                                OR CONTAINS ((summary.L1_ACRONYM,
                                              summary.HL1_DESCRIPTION),
                                             in_search_string
                                             )
                        )
                    ORDER BY summary.L1_ACRONYM;

    out_result = SELECT DISTINCT summary.KPI_TYPE_NAME,
                                 summary.KPI_OPTION_NAME,
                                 summary.TOTAL_VALUE,
                                 summary.TOTAL_VOLUME,
                                 summary.TOTAL_VALUE_ALLOCATED,
                                 summary.TOTAL_VOLUME_ALLOCATED,
                                 UPPER(summary.L1_ACRONYM) as L1_ACRONYM,
                                 "MKTG_PLANNING_TOOL"."mktgplanningtool.db.functions::GET_CRM_ID"(summary.BUDGET_YEAR, summary.L1_ACRONYM, '', '', '', '', '') AS CRM_ID,
                                 summary.HL1_DESCRIPTION,
                                 summary.BUDGET_YEAR,
                                 summary.REGION_NAME,
                                 summary.HL1_ID,
                                 summary.IS_LOCKED
                  FROM "_SYS_BIC"."mktgplanningtool.db.data.views/CV_HL1_KPI_SUMMARY" summary
                  WHERE   summary.HL1_ID IN (SELECT lim.HL1_ID FROM :va_limits lim LIMIT :in_limit OFFSET :in_offset)
                  ORDER BY summary.L1_ACRONYM;

	--Calculate total of rows
	SELECT DISTINCT COUNT(l1s.HL1_ID)
        INTO out_total_rows
        FROM  :va_limits l1s;
	
END;

